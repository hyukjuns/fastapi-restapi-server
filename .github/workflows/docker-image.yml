name: CI v1

on:
  push:
    branches: [ "main" ]
    paths:
      - app/**
  pull_request:
    branches: [ "main" ]
    paths:
      - app/**
  workflow_dispatch:

env:
  IMAGE_NAME: fastapi-sample-webapp
  REGISTRY: devaksacr001.azurecr.io

jobs:

  Build-Test-Application:
    runs-on: ubuntu-latest

    steps:
    # Checkout Repo
    - uses: actions/checkout@v4
    - name: Set current date as env variable
      run: echo "TIME=$(date +'%Y-%m-%dT%H:%M:%S')" >> $GITHUB_ENV
    
    # Setup Python version
    - name: Setup Python
      uses: actions/setup-python@v5.2.0
      with:
        python-version: '3.11.7'

    # Test Python Application
    - name: Pytest
      run: |
          pip install -r requirements.txt
          pytest app/test_rest.py | tee app/pytest-results-${{ github.sha }}.txt

    # Upload Test Reulst as Artifact
    - name: Upload pytest test results
      uses: actions/upload-artifact@v4
      with:
        name: pytest-result
        path: app/pytest-results-${{ github.sha }}.txt
      if: ${{ always() }}

      # Notification build result to Slack
    - name: Post to a Slack channel
      id: slack
      uses: slackapi/slack-github-action@v1.27.0
      with:
        channel-id: 'C07T9V22C75'
        slack-message: "GitHub Action - ${{ github.workflow }} - Pytest Job result: ${{ job.status }}\n Check pytest result!\nRepository: ${{ github.repository }}\nActor: ${{ github.actor }}\nRun Number: ${{ github.run_number }}"
      env:
        SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}

  Build-and-Push-Deploy:
    environment: prd-deployment-admin
    runs-on: ubuntu-latest
    needs: Build-Test-Application
    if: success()
    steps:
    # Checkout Repo
    - uses: actions/checkout@v4

    # Setup Docker Buildx 
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    # Login to ACR
    - name: Docker Login to ACR
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ secrets.AZURE_CLIENT_ID }}
        password: ${{ secrets.AZURE_CLIENT_SECRET }}
    
    # Build and Push Container Image to ACR
    - name: Build and Push Docker image to ACR
      uses: docker/build-push-action@v6.9.0
      with:
          context: .
          cache-from: type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:4ce84d2a556b5ee9f9f621176a441546f47a31cb
          cache-to: type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:4ce84d2a556b5ee9f9f621176a441546f47a31cb,mode=max
          platforms: linux/amd64
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}

    # Set image version to deployment manifest
    - name: Modify Manifest
      run: |
        yq -i '.spec.template.spec.containers[0].image="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}"' manifests/rollouts.yaml
        git config --global user.name 'GitHub Actions'
        git config --global user.email 'hyukjuns@github.com'
        git add manifests/rollouts.yaml
        git commit -m "Update manifests/rollouts.yaml by GitHub Actions"
        git push
    
    # Notification build result to Slack
    - name: Post to a Slack channel
      id: slack
      uses: slackapi/slack-github-action@v1.27.0
      with:
        channel-id: 'C07T9V22C75'
        slack-message: "GitHub Action - ${{ github.workflow }} - Docker Build and Push / Modify K8s Manifest result: ${{ job.status }}\n Repository: ${{ github.repository }}\n Actor: ${{ github.actor }}\nRun Number: ${{ github.run_number }}"
      env:
        SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}